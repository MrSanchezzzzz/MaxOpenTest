import 'package:equatable/equatable.dart';
import 'package:maxopentest/blocs/getmovies_states.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:maxopentest/utils/shared_preferences.dart';

import '../utils/requests.dart';

abstract class GetMoviesEvent extends Equatable {
  const GetMoviesEvent();

  @override
  List<Object> get props => [];
}

class GetTopFiveMovies extends GetMoviesEvent {}
class GetLatestMovies extends GetMoviesEvent {}
class GetFavoriteMovies extends GetMoviesEvent {}


class FavoriteMoviesBloc extends Bloc<GetMoviesEvent, GetMoviesState> {

  FavoriteMoviesBloc() : super(GetMoviesInitial()) {
    on<GetFavoriteMovies>(_onGetFavoriteMovies);
  }

  void _onGetFavoriteMovies(GetFavoriteMovies event, Emitter<GetMoviesState> emit) async {
    emit(GetMoviesLoading());
    try {
      final movies =  await Preferences.getFavorites();
      emit(GetMoviesLoaded(movies));
    } catch (e) {
      emit(GetMoviesError(e.toString()));
    }
  }
}

class TopFiveMoviesBloc extends Bloc<GetMoviesEvent, GetMoviesState> {

  TopFiveMoviesBloc() : super(GetMoviesInitial()) {
    on<GetTopFiveMovies>(_onGetTopFiveMovies);
  }

  void _onGetTopFiveMovies(GetTopFiveMovies event, Emitter<GetMoviesState> emit) async {
    emit(GetMoviesLoading());
    try {
      final movies =  await Requests.getPopularMovies();
      emit(GetMoviesLoaded(movies));
    } catch (e) {
      emit(GetMoviesError(e.toString()));
    }
  }
}

class LatestMoviesBloc extends Bloc<GetMoviesEvent, GetMoviesState> {

  LatestMoviesBloc() : super(GetMoviesInitial()) {
    on<GetLatestMovies>(_onGetLatestMovies);
  }

  void _onGetLatestMovies(GetLatestMovies event, Emitter<GetMoviesState> emit) async {
    emit(GetMoviesLoading());
    try {
      final movies =  await Requests.getLastMovies();
      emit(GetMoviesLoaded(movies));
    } catch (e) {
      emit(GetMoviesError(e.toString()));
    }
  }
}

