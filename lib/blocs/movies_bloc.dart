import 'package:equatable/equatable.dart';
import 'package:maxopentest/blocs/getmovies_states.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:maxopentest/utils/shared_preferences.dart';

import '../entities/movie.dart';
import '../utils/requests.dart';

abstract class GetMoviesEvent extends Equatable {
  const GetMoviesEvent();

  @override
  List<Object> get props => [];
}

class GetTopFiveMovies extends GetMoviesEvent {}
class GetLatestMovies extends GetMoviesEvent {}
class GetFavoriteMovies extends GetMoviesEvent {}
class SearchMoviesEvent extends GetMoviesEvent {
  final String title;
  const SearchMoviesEvent({required this.title});
}

class SearchMoviesBloc extends Bloc<GetMoviesEvent, GetMoviesState> {

  SearchMoviesBloc() : super(GetMoviesInitial()) {
    on<SearchMoviesEvent>(_onSearchMovies);
  }
  List<Movie> movies=[];

  void _onSearchMovies(SearchMoviesEvent event, Emitter<GetMoviesState> emit) async {
    emit(GetMoviesLoading());
    try {
      movies = await Requests.searchMovies(title:event.title);
      emit(GetMoviesLoaded(movies));
    } catch (e) {
      emit(GetMoviesError(e.toString()));
    }
  }
}

class FavoriteMoviesBloc extends FetchMoviesBloc{

  FavoriteMoviesBloc() : super(repository:Preferences.getFavorites) {
    on<GetFavoriteMovies>(_onFetchMovies);
  }
}

class TopFiveMoviesBloc extends FetchMoviesBloc{

  TopFiveMoviesBloc() : super(repository:Requests.getPopularMovies) {
    on<GetTopFiveMovies>(_onFetchMovies);
  }
}

class LatestMoviesBloc extends FetchMoviesBloc {

  LatestMoviesBloc() : super(repository:Requests.getLastMovies) {
    on<GetLatestMovies>(_onFetchMovies);
  }
}

typedef FetchMovies = Future<List<Movie>> Function();
class FetchMoviesBloc extends Bloc<GetMoviesEvent, GetMoviesState>{
  FetchMoviesBloc({required this.repository}):super(GetMoviesInitial()){
    on<GetMoviesEvent>(_onFetchMovies);
  }
  FetchMovies repository;
  List<Movie> movies=[];
  void _onFetchMovies(GetMoviesEvent event,Emitter<GetMoviesState> emit) async{
    emit(GetMoviesLoading());
    try {
      await repository().then((value){
        movies=value;
        emit(GetMoviesLoaded(value));
      });
    } catch (e) {
      emit(GetMoviesError(e.toString()));
    }
  }
}
