import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:maxopentest/blocs/getmovies_states.dart';
import 'package:maxopentest/utils/colors.dart';
import 'package:maxopentest/widgets/custom_appbar.dart';
import 'package:maxopentest/widgets/movie_card.dart';
import 'package:easy_debounce/easy_debounce.dart';

import '../blocs/movies_bloc.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  void _onSearchChanged() {
    if(_searchController.text==lastSearch){
      return;
    }
    EasyDebounce.debounce(
        'debouncer',
        Duration(milliseconds: 1000),
            () {_performSearch(_searchController.text.toLowerCase());}
    );
    lastSearch=_searchController.text;
  }
  String lastSearch='';
  void _performSearch(String query) async {
    if (query.isNotEmpty) {
      _context.read<SearchMoviesBloc>().add(SearchMoviesEvent(title: query));
    }
  }

  Widget _processState(BuildContext context, GetMoviesState state) {
    if (state is GetMoviesLoading) {
      return const Center(child: CircularProgressIndicator(),);
    }
    final movies = context.read<SearchMoviesBloc>().movies;
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          movies.isNotEmpty ? 'Search results (${movies.length})' : '',
          style: Theme.of(context).textTheme.bodyLarge,
          textAlign: TextAlign.left,
        ),
        Column(children: movies.map((movie) => MovieCard<SearchMoviesBloc>(index: movies.indexOf(movie))).toList())
      ],
    );
  }

  late BuildContext _context;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SearchMoviesBloc, GetMoviesState>(builder: (context, state) {
      _context = context;
      return Scaffold(
        appBar: const CustomAppbar(
          text: 'Search',
          showButton: true,
        ),
        backgroundColor: Colors.black,
        body: ConstrainedBox(
          constraints: BoxConstraints(
              maxHeight: MediaQuery.of(context).size.height, maxWidth: MediaQuery.of(context).size.width),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: SingleChildScrollView(
              keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Container(
                    decoration: BoxDecoration(
                      color: HexColor.fromHex('#2b2b2b'),
                      borderRadius: const BorderRadius.all(Radius.circular(10)),
                    ),
                    child: TextField(
                      controller: _searchController,
                      style: Theme.of(context).textTheme.bodyLarge,
                      decoration: const InputDecoration(
                        hintText: 'Search',
                        hintStyle: TextStyle(color: Colors.white24),
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.all(15.0),
                        prefixIcon: Icon(Icons.search, color: Colors.white),
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  _processState(context, state),
                ],
              ),
            ),
          ),
        ),
      );
    });
  }
}
