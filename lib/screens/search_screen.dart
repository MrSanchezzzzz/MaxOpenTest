import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:maxopentest/blocs/search_bloc.dart';
import 'package:maxopentest/utils/colors.dart';
import 'package:maxopentest/utils/requests.dart';
import 'package:maxopentest/widgets/custom_appbar.dart';
import 'package:maxopentest/widgets/movie_card.dart';

import '../entities/movie.dart';
//TODO save state
class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  TextEditingController _searchController = TextEditingController();
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  void _onSearchChanged() {
    if (_debounce?.isActive ?? false) _debounce?.cancel();
    _debounce = Timer(const Duration(milliseconds: 500), () {
      _performSearch(_searchController.text.toLowerCase());
    });
  }

  void _performSearch(String query) async{
    List<Movie> movies=await Requests.searchMovies(title: query);
    _context.read<SearchBloc>().add(SearchingEvent(movies));
  }
 late BuildContext _context;
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SearchBloc,SearchState>(
        builder: (context, state){
          _context=context;
          final movies=context.read<SearchBloc>().state.data;
          return Scaffold(
            appBar: CustomAppbar(
              text: 'Search',
              showButton: true,
            ),
            backgroundColor: Colors.black,
            body: ConstrainedBox(
              constraints: BoxConstraints(
                  maxHeight: MediaQuery.of(context).size.height,
                  maxWidth: MediaQuery.of(context).size.width
              ),
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Container(
                        decoration: BoxDecoration(
                          color: HexColor.fromHex('#2b2b2b'),
                          borderRadius: BorderRadius.all(Radius.circular(10)),
                        ),
                        child: TextField(
                          controller: _searchController,
                          style: TextStyle(color: Colors.white),
                          decoration: InputDecoration(
                            hintText: 'Search',
                            hintStyle: TextStyle(color: Colors.white24),
                            border: InputBorder.none,
                            contentPadding: EdgeInsets.all(15.0),
                            prefixIcon: Icon(Icons.search, color: Colors.white),
                          ),
                        ),
                      ),
                      SizedBox(height: 20),
                      Text(
                        movies.isNotEmpty?'Search results (${movies.length})':'',
                        style: TextStyle(fontSize: 18, fontFamily: 'Poppins'),
                      ),
                      Column(
                          children: movies.map((movie) => MovieCard(movie: movie)).toList()
                      )
                    ],
                  ),
                ),
              ),
            ),
          );
        }
    );
  }
}