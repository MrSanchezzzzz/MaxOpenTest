import 'dart:convert';
import 'package:http/http.dart' as http;

import '../entities/movie.dart';

class Requests {
  static const _auth =
      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiOTMyODdlZDY1ODUwYzQ2YWFiNjg2Y2VmNzEzNzZlMyIsIm5iZiI6MTcxOTIzMzU4NS4zNDE1Mywic3ViIjoiNjY3OTZiMTY1NWE5ODIzZDdmMjM2MTkwIiwic2NvcGVzIjpbImFwaV9yZWFkIl0sInZlcnNpb24iOjF9.m-LzlHBG8sYE2PyEOalhdFHQfv1USMcUYiXajtGSEo4';
  static const Map<String,String> _header= {'accept': 'application/json', 'Authorization': _auth};
  static String baseUrl = '';
  static String language = 'en-US';

  static Future<void> configure() async {
    const String url = 'https://api.themoviedb.org/3/configuration';
    const Map<String, String> headers = {'accept': 'application/json', 'Authorization': _auth};

    final response = await http.get(Uri.parse(url), headers: headers);
    if (response.statusCode == 200) {
      Map<String, dynamic> jsonResponse = jsonDecode(response.body);
      Requests.baseUrl = jsonResponse['images']['base_url'];
    } else {
      print('Request failed with status: ${response.statusCode}.');
    }
  }

  static Future<List<Movie>> searchMovies({required String title,bool includeAdult=true,int count=12}) async{
    String url = 'https://api.themoviedb.org/3/search/movie?query=$title&include_adult=$includeAdult&language=$language&page=1';
    final response = await http.get(Uri.parse(url), headers: _header);
    if (response.statusCode == 200) {
      Map<String, dynamic> jsonResponse = jsonDecode(response.body);
      List<dynamic> results = jsonResponse['results'];
      List<Movie> movies = [];
      int i = 0;
      for (Map<String, dynamic> result in results) {
        if (i >= count) {
          break;
        }
        if(result['poster_path']==null){
          continue;
        }
        Movie m = Movie.fromJson(result);
        m.genres = await getMovieGenres(m.id);
        movies.add(m);
        i++;
      }
      return movies;
    } else {
      print('Request failed with status: ${response.statusCode}.');
    }

    return [];
  }

  static Future<List<Movie>> getPopularMovies({int count = 5}) async {
    String url = 'https://api.themoviedb.org/3/movie/popular?language=$language&page=1';
    const Map<String, String> headers = {'accept': 'application/json', 'Authorization': _auth};
    final response = await http.get(Uri.parse(url), headers: headers);
    if (response.statusCode == 200) {
      Map<String, dynamic> jsonResponse = jsonDecode(response.body);
      List<dynamic> results = jsonResponse['results'];
      List<Movie> movies = [];
      int i = 0;
      for (Map<String, dynamic> result in results) {
        if (i >= count) {
          break;
        }
        Movie m = Movie.fromJson(result);
        m.genres = await getMovieGenres(m.id);
        movies.add(m);
        i++;
      }
      return movies;
    } else {
      print('Request failed with status: ${response.statusCode}.');
    }

    return [];
  }

  static Future<List<Movie>> getLastMovies({int count = 12}) async {
    String url = 'https://api.themoviedb.org/3/movie/now_playing?language=$language&page=1';
    const Map<String, String> headers = {'accept': 'application/json', 'Authorization': _auth};
    final response = await http.get(Uri.parse(url), headers: headers);
    if (response.statusCode == 200) {
      Map<String, dynamic> jsonResponse = jsonDecode(response.body);
      List<dynamic> results = jsonResponse['results'];
      List<Movie> movies = [];
      int i = 0;
      for (Map<String, dynamic> result in results) {
        if (i >= count) {
          break;
        }
        Movie m = Movie.fromJson(result);
        m.genres = await getMovieGenres(m.id);
        movies.add(m);
        i++;
      }
      return movies;
    } else {
      print('Request failed with status: ${response.statusCode}.');
    }

    return [];
  }


  static Future<List<String>> getMovieGenres(int id) async {
    String url = 'https://api.themoviedb.org/3/movie/$id?language=$language';
    const Map<String, String> headers = {'accept': 'application/json', 'Authorization': _auth};
    final response = await http.get(Uri.parse(url), headers: headers);
    List<String> genresStrings = [];
    if (response.statusCode == 200) {
      Map<String, dynamic> jsonResponse = jsonDecode(response.body);
      List<dynamic> genres = jsonResponse['genres'];
      for (Map<String, dynamic> genre in genres) {
        if (genre != null) {
          genresStrings.add(genre['name']!);
        }
      }
    }
    return genresStrings;
  }
}
